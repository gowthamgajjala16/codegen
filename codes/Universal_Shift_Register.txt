module shift_register #(
    parameter WIDTH = 8
)(
    input  wire clk,
    input  wire reset,
    input  wire [1:0] mode, // 00 = Hold, 01 = Left, 10 = Right, 11 = Parallel Load
    input  wire [WIDTH-1:0] data_in,
    output reg  [WIDTH-1:0] data_out
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            data_out <= 0;
        else begin
            case (mode)
                2'b00: data_out <= data_out;                  // Hold
                2'b01: data_out <= {data_out[WIDTH-2:0], 1'b0}; // Shift Left
                2'b10: data_out <= {1'b0, data_out[WIDTH-1:1]}; // Shift Right
                2'b11: data_out <= data_in;                   // Parallel Load
            endcase
        end
    end
endmodule
