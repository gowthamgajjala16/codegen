module moore_seq_detector_1011 (
    input wire clk,
    input wire reset,
    input wire in,
    output reg out
);

    // Define states
    typedef enum logic [2:0] {
        S0, // Initial state
        S1, // Got '1'
        S2, // Got '10'
        S3, // Got '101'
        S4  // Got '1011' â†’ Output HIGH
    } state_t;

    state_t current_state, next_state;

    // State register
    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= S0;
        else
            current_state <= next_state;
    end

    // Next state logic
    always @(*) begin
        case (current_state)
            S0: next_state = (in == 1) ? S1 : S0;
            S1: next_state = (in == 0) ? S2 : S1;
            S2: next_state = (in == 1) ? S3 : S0;
            S3: next_state = (in == 1) ? S4 : S2;
            S4: next_state = (in == 1) ? S1 : S2;
            default: next_state = S0;
        endcase
    end

    // Output logic (Moore: depends only on state)
    always @(*) begin
        case (current_state)
            S4: out = 1'b1;
            default: out = 1'b0;
        endcase
    end

endmodule
